---
import { readOne, readAll } from "../../lib/markdoc/read";
import { blog } from "../../lib/markdoc/frontmatter.schema";
import Renderer from "../../components/Renderer.astro";
import BlogPostMeta from "../../components/BlogPostMeta.astro";
import PrevNextTeaser from "../../components/PrevNextTeaser.astro"
import ContentLayout from "../../layouts/ContentLayout.astro";
import { SITE_URL } from "../../config";
import { sortByDate } from "../../utils/sortByDate.js"

export async function getStaticPaths() {
  const posts = await readAll({
    directory: "blog",
    frontmatterSchema: blog,
  });

  // we don't want to generate pages for posts that link to external websites
  const filteredPosts = posts
    .filter((p) => p.frontmatter.draft !== true)
    .filter(({ frontmatter }) => !frontmatter.external);
  /*
    return filteredPosts.map((post) => {
      return { params: { 
        slug: post.slug 
      }};
    });
  */
  const numberOfPosts = filteredPosts.length // Total of all posts

  return filteredPosts.sort(sortByDate).map((post, i) => ({ // Map() all posts after sorting
    params: {
      slug: post.slug,
    },
    props: {
      post,
      prevPost: // Previous post
        i + 1 === numberOfPosts // If the current post is the oldest
          ? { frontmatter: ""}
          : filteredPosts[i + 1],
      nextPost: // Next post
        i === 0 // If the current post is the newest
          ? { frontmatter: "" }
          : filteredPosts[i - 1],
    },
  }))
}

// Get properties (frontmatter) for the previous/next posts
const { prevPost, nextPost } = Astro.props

const { slug } = Astro.params;
if (typeof slug !== "string") {
  throw Error(`slug should be string. Received: ${slug}`);
}

const { content, frontmatter } = await readOne({
  directory: "blog",
  slug,
  frontmatterSchema: blog,
});

const ogImageAbsoluteUrl =
  frontmatter.external !== true && frontmatter.ogImagePath
    ? new URL(frontmatter.ogImagePath, SITE_URL).toString()
    : undefined;
---

<ContentLayout title={frontmatter.title} date={frontmatter.date}>
  <BlogPostMeta
    title={`${frontmatter.title} | Lépe a radostněji`}
    description={frontmatter.external ? undefined : frontmatter.description}
    publishDate={frontmatter.date.toISOString()}
    pagePath={`/blog/${slug}`}
    ogImageAbsoluteUrl={ogImageAbsoluteUrl}
    slot="meta"
  />
  <Renderer content={content} slot="content" />
  <div slot="article-footer" class="py-8 sm:flex sm:justify-between gap-4">
    {nextPost && <PrevNextTeaser post={nextPost} prev={true} />}
    {prevPost && <PrevNextTeaser post={prevPost} prev={false} />}
  </div>
</ContentLayout>
